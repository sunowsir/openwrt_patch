#!/bin/bash
#
#       * File     : natmap_callback_main
#       * Author   : sunowsir
#       * Mail     : sunowsir@163.com
#       * Github   : github.com/sunowsir
#       * Creation : Fri 20 Dec 2024 01:24:17 PM CST

set -x

WORK_DIR="$(dirname "$(readlink -f "${0}")")"
source "${WORK_DIR}/natmap_callback.config"
source "${WORK_DIR}/natmap_callback_notify_push"
source "${WORK_DIR}/natmap_callback_dns_record"

# 发送通知
function sc_send() {
    local notify_title="${1}"
    local public_ipv4="${2}"
    local public_port="${3}"
    local private_ipv4="${7}"
    local private_port="${5}"
    local protocol="${6}"

    if [[ "$(uci -q get "natmap_callback.${private_port}")" != "" ]] && 
       [[ ! $(uci -q get "natmap_callback.${private_port}.notify") ]] ; then 
    	return 0
    fi

    # 调用sc_send函数
    declare ret
    ret=$(sc_send_proc "${notify_title}" \
        "${protocol}: ${private_ipv4}:${private_port} --> ${public_ipv4}:${public_port}"$'\n\n' \
        "$SENDKEY")

    if [[ ${ret} -ne 200 ]]; then
        echo "send ${*} error: ${ret}" 
        return 127
    fi

    return 0
}

# 获取现有规则列表
function currlent_rules_get() {
    declare response
    declare success

    for ((i = 0; i < RETRY_NUM; i++)); do
        response=$(curl -s -X GET "${CLOUDFLARE_API_URL}/rulesets/${RULE}" \
            -H "Authorization: Bearer ${AUTH}" \
            -H "Content-Type: application/json")

        # 解析 API 响应
        success=$(echo "${response}" | jq -r '.success')
        if [[ "${success}" == 'true' ]]; then
            break
        fi
    done

    echo "${response}" | jq '.result.rules'
}

# 定义新规则
function new_rule_make() {
    local PORT=${1}
    # 访问域名
    local ACCESS_DOMAIN="${2}"
    # 规则名称
    local RULE_NAME="${3}"

    local new_rule="{\"expression\":\"(http.request.full_uri wildcard r\\\"http*://${ACCESS_DOMAIN}/*\\\")\",\"description\":\"${RULE_NAME}\",\"action\":\"redirect\",\"action_parameters\":{\"from_value\":{\"target_url\":{\"expression\":\"wildcard_replace(http.request.full_uri, r\\\"http*://${ACCESS_DOMAIN}/*\\\", r\\\"https://${REDIRECT_DOMAIN}:${PORT}/\${2}\\\")\"},\"status_code\":301,\"preserve_query_string\":true}}}"

    echo "${new_rule}"
}

# 检查是否存在相同描述的规则
function same_rules_check() {
    local current_rules="${1}"   # 当前规则 JSON 数据
    local new_rule="${2}"       # 新规则 JSON 数据
    local RULE_NAME="${3}"      # 规则名称

    # 检查是否存在相同描述的规则
    local rule_exists
    rule_exists=$(echo "$current_rules" | jq --arg rule_name "$RULE_NAME" '[.[] | select(.description == $rule_name)]')

    local updated_rules

    if [[ $(echo "$rule_exists" | jq 'length') -gt 0 ]]; then
        # 若描述相同的规则已存在，则替换旧规则
        updated_rules=$(echo "$current_rules" | jq --argjson new_rule "$new_rule" --arg rule_name "$RULE_NAME" \
            'map(if .description == $rule_name then $new_rule else . end)')
    else
        # 若规则不存在，则追加新规则
        updated_rules=$(echo "$current_rules" | jq --argjson new_rule "$new_rule" '. += [$new_rule]')
    fi

    echo "${updated_rules}"
}

# 提交更新后的规则
function push_new_rules() {
    local updated_rules="${1}"

    declare response
    response=$(curl -X PUT "${CLOUDFLARE_API_URL}/rulesets/${RULE}" \
        -H "Authorization: Bearer ${AUTH}" \
        -H "Content-Type: application/json" \
	--data "{\"name\":\"default\",\"kind\":\"zone\",\"phase\":\"http_request_dynamic_redirect\",\"rules\":${updated_rules}}")

    # 解析 API 响应
    declare success
    success=$(echo "${response}" | jq -r '.success')
    if [[ "${success}" != 'true' ]]; then
        echo "提交规则失败: ${response}"
        return 127
    fi
    
    return $?
}

# Redirect rule
function redirect_rule_setup_proc() {
    # 映射端口
    local PORT=${2}
    # 访问域名
    local ACCESS_DOMAIN="${3}.${ROOT_DOMAIN}"
    # 规则名称
    local RULE_NAME="${3}"

    for ((i = 0; i < ${RETRY_NUM}; i++)); do
        # 获取现有规则列表
        declare current_rules
        current_rules="$(currlent_rules_get)"

        # 定义新规则
        declare new_rule
        new_rule="$(new_rule_make "${PORT}" "${ACCESS_DOMAIN}" "${RULE_NAME}")"

        # 检查是否存在相同描述的规则
        declare updated_rules
        updated_rules="$(same_rules_check "${current_rules}" "${new_rule}" "${RULE_NAME}")"

        # 提交更新后的规则
        if push_new_rules "${updated_rules}" ; then
            break;
        fi
    done

    return $?
}

# 访问域名DNS记录设置
function access_domain_dns_records_add() {
    local public_ipv4="${1}"
    local private_port="${4}"

    for ((i = 0; i < RETRY_NUM; i++)); do
        if record_check "$(uci -q get "natmap_callback.${private_port}").${ROOT_DOMAIN}" "${public_ipv4}" ; then
            break;
        fi
    done

    record_modify "${REDIRECT_DOMAIN}" "${public_ipv4}" "false"

    return $?
}

# 转发规则设置 
function redirect_rule_setup() {
    echo "redirect_rule_setup: ${*}"

    local public_ipv4="${1}"
    local public_port="${2}"
    local private_ipv4="${6}"
    local protocol="${5}"
    local private_port="${4}"

    declare sub_domain
    sub_domain="$(uci -q get "natmap_callback.${private_port}")"

    # redirect_domain_dns_records "${public_ipv4}" 
    redirect_rule_setup_proc "${public_ipv4}" "${public_port}" "${sub_domain}" 
     
    return $?
}

# 添加防火墙规则
function firewall_rules_add() {
    local private_port="${4}"

    # 1. 检查是否已经存在同名规则
    if ! uci show firewall | grep -q "firewall.@rule\[.*\].name='Allow-${private_port}'"; then

        # 2. 添加通讯规则
        uci add firewall rule
        uci set firewall.@rule[-1].name="Allow-${private_port}"
        uci set firewall.@rule[-1].src='wan'
        uci set firewall.@rule[-1].dest_port="${private_port}"
        uci set firewall.@rule[-1].target='ACCEPT'
        
        # 3. 提交并重启防火墙
        uci commit firewall
        service firewall restart
    fi

    return $?
}

# 失败发送通知并退出程序
function setup_failed() {
    local failed_code="${1}"

    sc_send 'Natmap 映射更新失败' "${@}"

    shift 

    exit "${failed_code}"
}

# 检查是否存在子域名配置，若不存在则仅通知并添加防火墙规则，然后直接退出脚本
function redirect_domain_check() {
    echo "redirect_domain_check: ${*}"
    local public_ipv4="${1}"
    local public_port="${2}"
    local private_ipv4="${6}"
    local protocol="${5}"
    local private_port="${4}"

    if [[ "${private_port}" == "" ]]; then
        echo "private_port is NULL"
        return 127
    fi

    declare sub_domain
    sub_domain="$(uci -q get "natmap_callback.${private_port}")"

    if [[ "${sub_domain}" == "" ]]; then
    	sc_send 'Natmap 映射已更新' "${@}"
    	firewall_rules_add "${@}" || setup_failed ${?} "${@}"
	exit 0
    fi

    return 0
}

function main() {
    echo "main: ${*}"
    redirect_domain_check "${@}" || setup_failed ${?} "${@}"

    redirect_rule_setup "${@}" || setup_failed ${?} "${@}"

    firewall_rules_add "${@}" || setup_failed ${?} "${@}"

    access_domain_dns_records_add "${@}" || setup_failed ${?} "${@}"

    # 成功发通知
    sc_send 'Natmap 映射已更新' "${@}"

    return $?
}

echo "---"
echo "${@}"
echo "---"

main "${@}"

set +x

exit $?
